/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.poznan.put.kacperwleklak.cab.protocol;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.apache.thrift.TException;
import org.apache.thrift.async.TAsyncClientFactory;
import org.apache.thrift.async.TAsyncClientManager;
import org.apache.thrift.async.TAsyncMethodCall;
import org.apache.thrift.protocol.TProtocolFactory;
import pl.poznan.put.kacperwleklak.reliablechannel.thrift.TAsyncClientFactoryBuilder;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-08-01")
@Slf4j
public class CabProtocol {

  public interface Iface {

    public void acceptEventHandler(CabAcceptMessage acceptMessage) throws org.apache.thrift.TException;

    public void broadcastEventHandler(CabMessage cabMessage) throws org.apache.thrift.TException;

    public void proposeEventHandler(CabProposeMessage proposeMessage) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void acceptEventHandler(CabAcceptMessage acceptMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void broadcastEventHandler(CabMessage cabMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void proposeEventHandler(CabProposeMessage proposeMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void acceptEventHandler(CabAcceptMessage acceptMessage) throws org.apache.thrift.TException
    {
      send_acceptEventHandler(acceptMessage);
    }

    public void send_acceptEventHandler(CabAcceptMessage acceptMessage) throws org.apache.thrift.TException
    {
      acceptEventHandler_args args = new acceptEventHandler_args();
      args.setAcceptMessage(acceptMessage);
      sendBaseOneway("acceptEventHandler", args);
    }

    public void broadcastEventHandler(CabMessage cabMessage) throws org.apache.thrift.TException
    {
      send_broadcastEventHandler(cabMessage);
    }

    public void send_broadcastEventHandler(CabMessage cabMessage) throws org.apache.thrift.TException
    {
      broadcastEventHandler_args args = new broadcastEventHandler_args();
      args.setCabMessage(cabMessage);
      sendBaseOneway("broadcastEventHandler", args);
    }

    public void proposeEventHandler(CabProposeMessage proposeMessage) throws org.apache.thrift.TException
    {
      send_proposeEventHandler(proposeMessage);
    }

    public void send_proposeEventHandler(CabProposeMessage proposeMessage) throws org.apache.thrift.TException
    {
      proposeEventHandler_args args = new proposeEventHandler_args();
      args.setProposeMessage(proposeMessage);
      sendBaseOneway("proposeEventHandler", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public static class FactoryBuilder implements TAsyncClientFactoryBuilder {

      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public FactoryBuilder() {}

      @Override
      public TAsyncClientFactoryBuilder builder() {
        return new FactoryBuilder();
      }

      @Override
      public void setClientManager(TAsyncClientManager clientManager) {
        this.clientManager = clientManager;
      }

      @Override
      public void setProtocolFactory(TProtocolFactory protocolFactory) {
        this.protocolFactory = protocolFactory;
      }

      @Override
      public TAsyncClientFactory build() {
        if (clientManager == null) {
          throw new IllegalStateException("Missing client manager");
        }
        if (protocolFactory == null) {
          throw new IllegalStateException("Missing protocol factory");
        }
        return new AsyncClient.Factory(clientManager, protocolFactory);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    private Queue<TAsyncMethodCall<Void>> callsQueue = new ConcurrentLinkedQueue<>();

    private boolean isBusy() {
      return this.___currentMethod != null;
    }

    @SneakyThrows
    @Override
    protected void onComplete() {
      log.debug("CabProtocol: Calling onComplete");
      TAsyncMethodCall<Void> scheduled = null;
      synchronized (this) {
        this.___currentMethod = null;
        if (!callsQueue.isEmpty()) {
          try {
            scheduled = getScheduled();
          } catch (TException e) {
            e.printStackTrace();
          }
        } else {
          log.debug("CabProtocol -- onComplete -- Empty callQueue");
        }
      }
      if (scheduled != null) {
        ___manager.call(scheduled);
      }
    }

    private TAsyncMethodCall<Void> getScheduled() throws TException {
      log.debug("Taking from callQueue, qSize={}", callsQueue.size());
      TAsyncMethodCall<Void> call = callsQueue.poll();
      if (call != null) {
        this.___currentMethod = call;
      } else {
        log.debug("CabProtocol onComplete: polled null");
      }
      return call;
    }


    public void acceptEventHandler(CabAcceptMessage acceptMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      acceptEventHandler_call method_call = new acceptEventHandler_call(acceptMessage, resultHandler, this, ___protocolFactory, ___transport);
      log.debug("CabProtocol: acceptEventHandler");
      synchronized (this) {
        if (isBusy()) {
          callsQueue.add(method_call);
          log.debug("CabProtocol: Scheduled acceptEventHandler, qSize={}", callsQueue.size());
          return;
        }
        this.___currentMethod = method_call;
      }
      ___manager.call(method_call);
    }

    public static class acceptEventHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private CabAcceptMessage acceptMessage;
      public acceptEventHandler_call(CabAcceptMessage acceptMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.acceptMessage = acceptMessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acceptEventHandler", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        acceptEventHandler_args args = new acceptEventHandler_args();
        args.setAcceptMessage(acceptMessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void broadcastEventHandler(CabMessage cabMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      broadcastEventHandler_call method_call = new broadcastEventHandler_call(cabMessage, resultHandler, this, ___protocolFactory, ___transport);
      log.debug("CabProtocol: broadcastEventHandler");
      synchronized (this) {
        if (isBusy()) {
          callsQueue.add(method_call);
          log.debug("CabProtocol: Scheduled broadcastEventHandler, qSize={}", callsQueue.size());
          return;
        }
        this.___currentMethod = method_call;
      }
      ___manager.call(method_call);
    }

    public static class broadcastEventHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private CabMessage cabMessage;
      public broadcastEventHandler_call(CabMessage cabMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cabMessage = cabMessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("broadcastEventHandler", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        broadcastEventHandler_args args = new broadcastEventHandler_args();
        args.setCabMessage(cabMessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void proposeEventHandler(CabProposeMessage proposeMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      proposeEventHandler_call method_call = new proposeEventHandler_call(proposeMessage, resultHandler, this, ___protocolFactory, ___transport);
      log.debug("CabProtocol: proposeEventHandler");
      synchronized (this) {
        if (isBusy()) {
          callsQueue.add(method_call);
          log.debug("CabProtocol: Scheduled proposeEventHandler, qSize={}", callsQueue.size());
          return;
        }
        this.___currentMethod = method_call;
      }
      ___manager.call(method_call);
    }

    public static class proposeEventHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private CabProposeMessage proposeMessage;
      public proposeEventHandler_call(CabProposeMessage proposeMessage, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.proposeMessage = proposeMessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("proposeEventHandler", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        proposeEventHandler_args args = new proposeEventHandler_args();
        args.setProposeMessage(proposeMessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("acceptEventHandler", new acceptEventHandler());
      processMap.put("broadcastEventHandler", new broadcastEventHandler());
      processMap.put("proposeEventHandler", new proposeEventHandler());
      return processMap;
    }

    public static class acceptEventHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acceptEventHandler_args> {
      public acceptEventHandler() {
        super("acceptEventHandler");
      }

      public acceptEventHandler_args getEmptyArgsInstance() {
        return new acceptEventHandler_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, acceptEventHandler_args args) throws org.apache.thrift.TException {
        iface.acceptEventHandler(args.acceptMessage);
        return null;
      }
    }

    public static class broadcastEventHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, broadcastEventHandler_args> {
      public broadcastEventHandler() {
        super("broadcastEventHandler");
      }

      public broadcastEventHandler_args getEmptyArgsInstance() {
        return new broadcastEventHandler_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, broadcastEventHandler_args args) throws org.apache.thrift.TException {
        iface.broadcastEventHandler(args.cabMessage);
        return null;
      }
    }

    public static class proposeEventHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, proposeEventHandler_args> {
      public proposeEventHandler() {
        super("proposeEventHandler");
      }

      public proposeEventHandler_args getEmptyArgsInstance() {
        return new proposeEventHandler_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, proposeEventHandler_args args) throws org.apache.thrift.TException {
        iface.proposeEventHandler(args.proposeMessage);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("acceptEventHandler", new acceptEventHandler());
      processMap.put("broadcastEventHandler", new broadcastEventHandler());
      processMap.put("proposeEventHandler", new proposeEventHandler());
      return processMap;
    }

    public static class acceptEventHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, acceptEventHandler_args, Void> {
      public acceptEventHandler() {
        super("acceptEventHandler");
      }

      public acceptEventHandler_args getEmptyArgsInstance() {
        return new acceptEventHandler_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, acceptEventHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.acceptEventHandler(args.acceptMessage,resultHandler);
      }
    }

    public static class broadcastEventHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, broadcastEventHandler_args, Void> {
      public broadcastEventHandler() {
        super("broadcastEventHandler");
      }

      public broadcastEventHandler_args getEmptyArgsInstance() {
        return new broadcastEventHandler_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, broadcastEventHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.broadcastEventHandler(args.cabMessage,resultHandler);
      }
    }

    public static class proposeEventHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, proposeEventHandler_args, Void> {
      public proposeEventHandler() {
        super("proposeEventHandler");
      }

      public proposeEventHandler_args getEmptyArgsInstance() {
        return new proposeEventHandler_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, proposeEventHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.proposeEventHandler(args.proposeMessage,resultHandler);
      }
    }

  }

  public static class acceptEventHandler_args implements org.apache.thrift.TBase<acceptEventHandler_args, acceptEventHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<acceptEventHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptEventHandler_args");

    private static final org.apache.thrift.protocol.TField ACCEPT_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new acceptEventHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new acceptEventHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CabAcceptMessage acceptMessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCEPT_MESSAGE((short)1, "acceptMessage");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCEPT_MESSAGE
            return ACCEPT_MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCEPT_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("acceptMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CabAcceptMessage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptEventHandler_args.class, metaDataMap);
    }

    public acceptEventHandler_args() {
    }

    public acceptEventHandler_args(
      CabAcceptMessage acceptMessage)
    {
      this();
      this.acceptMessage = acceptMessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptEventHandler_args(acceptEventHandler_args other) {
      if (other.isSetAcceptMessage()) {
        this.acceptMessage = new CabAcceptMessage(other.acceptMessage);
      }
    }

    public acceptEventHandler_args deepCopy() {
      return new acceptEventHandler_args(this);
    }

    @Override
    public void clear() {
      this.acceptMessage = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CabAcceptMessage getAcceptMessage() {
      return this.acceptMessage;
    }

    public acceptEventHandler_args setAcceptMessage(@org.apache.thrift.annotation.Nullable CabAcceptMessage acceptMessage) {
      this.acceptMessage = acceptMessage;
      return this;
    }

    public void unsetAcceptMessage() {
      this.acceptMessage = null;
    }

    /** Returns true if field acceptMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetAcceptMessage() {
      return this.acceptMessage != null;
    }

    public void setAcceptMessageIsSet(boolean value) {
      if (!value) {
        this.acceptMessage = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case ACCEPT_MESSAGE:
        if (value == null) {
          unsetAcceptMessage();
        } else {
          setAcceptMessage((CabAcceptMessage)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCEPT_MESSAGE:
        return getAcceptMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCEPT_MESSAGE:
        return isSetAcceptMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof acceptEventHandler_args)
        return this.equals((acceptEventHandler_args)that);
      return false;
    }

    public boolean equals(acceptEventHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_acceptMessage = true && this.isSetAcceptMessage();
      boolean that_present_acceptMessage = true && that.isSetAcceptMessage();
      if (this_present_acceptMessage || that_present_acceptMessage) {
        if (!(this_present_acceptMessage && that_present_acceptMessage))
          return false;
        if (!this.acceptMessage.equals(that.acceptMessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAcceptMessage()) ? 131071 : 524287);
      if (isSetAcceptMessage())
        hashCode = hashCode * 8191 + acceptMessage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(acceptEventHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetAcceptMessage(), other.isSetAcceptMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAcceptMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptMessage, other.acceptMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acceptEventHandler_args(");
      boolean first = true;

      sb.append("acceptMessage:");
      if (this.acceptMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.acceptMessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (acceptMessage != null) {
        acceptMessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acceptEventHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public acceptEventHandler_argsStandardScheme getScheme() {
        return new acceptEventHandler_argsStandardScheme();
      }
    }

    private static class acceptEventHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<acceptEventHandler_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acceptEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCEPT_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.acceptMessage = new CabAcceptMessage();
                struct.acceptMessage.read(iprot);
                struct.setAcceptMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acceptEventHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.acceptMessage != null) {
          oprot.writeFieldBegin(ACCEPT_MESSAGE_FIELD_DESC);
          struct.acceptMessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acceptEventHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public acceptEventHandler_argsTupleScheme getScheme() {
        return new acceptEventHandler_argsTupleScheme();
      }
    }

    private static class acceptEventHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<acceptEventHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acceptEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAcceptMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAcceptMessage()) {
          struct.acceptMessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acceptEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.acceptMessage = new CabAcceptMessage();
          struct.acceptMessage.read(iprot);
          struct.setAcceptMessageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class broadcastEventHandler_args implements org.apache.thrift.TBase<broadcastEventHandler_args, broadcastEventHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<broadcastEventHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("broadcastEventHandler_args");

    private static final org.apache.thrift.protocol.TField CAB_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cabMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new broadcastEventHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new broadcastEventHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CabMessage cabMessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAB_MESSAGE((short)1, "cabMessage");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAB_MESSAGE
            return CAB_MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAB_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("cabMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CabMessage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(broadcastEventHandler_args.class, metaDataMap);
    }

    public broadcastEventHandler_args() {
    }

    public broadcastEventHandler_args(
      CabMessage cabMessage)
    {
      this();
      this.cabMessage = cabMessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public broadcastEventHandler_args(broadcastEventHandler_args other) {
      if (other.isSetCabMessage()) {
        this.cabMessage = new CabMessage(other.cabMessage);
      }
    }

    public broadcastEventHandler_args deepCopy() {
      return new broadcastEventHandler_args(this);
    }

    @Override
    public void clear() {
      this.cabMessage = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CabMessage getCabMessage() {
      return this.cabMessage;
    }

    public broadcastEventHandler_args setCabMessage(@org.apache.thrift.annotation.Nullable CabMessage cabMessage) {
      this.cabMessage = cabMessage;
      return this;
    }

    public void unsetCabMessage() {
      this.cabMessage = null;
    }

    /** Returns true if field cabMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetCabMessage() {
      return this.cabMessage != null;
    }

    public void setCabMessageIsSet(boolean value) {
      if (!value) {
        this.cabMessage = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case CAB_MESSAGE:
        if (value == null) {
          unsetCabMessage();
        } else {
          setCabMessage((CabMessage)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAB_MESSAGE:
        return getCabMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAB_MESSAGE:
        return isSetCabMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof broadcastEventHandler_args)
        return this.equals((broadcastEventHandler_args)that);
      return false;
    }

    public boolean equals(broadcastEventHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cabMessage = true && this.isSetCabMessage();
      boolean that_present_cabMessage = true && that.isSetCabMessage();
      if (this_present_cabMessage || that_present_cabMessage) {
        if (!(this_present_cabMessage && that_present_cabMessage))
          return false;
        if (!this.cabMessage.equals(that.cabMessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCabMessage()) ? 131071 : 524287);
      if (isSetCabMessage())
        hashCode = hashCode * 8191 + cabMessage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(broadcastEventHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetCabMessage(), other.isSetCabMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCabMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cabMessage, other.cabMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("broadcastEventHandler_args(");
      boolean first = true;

      sb.append("cabMessage:");
      if (this.cabMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.cabMessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cabMessage != null) {
        cabMessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class broadcastEventHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastEventHandler_argsStandardScheme getScheme() {
        return new broadcastEventHandler_argsStandardScheme();
      }
    }

    private static class broadcastEventHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<broadcastEventHandler_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, broadcastEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CAB_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cabMessage = new CabMessage();
                struct.cabMessage.read(iprot);
                struct.setCabMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, broadcastEventHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cabMessage != null) {
          oprot.writeFieldBegin(CAB_MESSAGE_FIELD_DESC);
          struct.cabMessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class broadcastEventHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public broadcastEventHandler_argsTupleScheme getScheme() {
        return new broadcastEventHandler_argsTupleScheme();
      }
    }

    private static class broadcastEventHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<broadcastEventHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, broadcastEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCabMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCabMessage()) {
          struct.cabMessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, broadcastEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cabMessage = new CabMessage();
          struct.cabMessage.read(iprot);
          struct.setCabMessageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class proposeEventHandler_args implements org.apache.thrift.TBase<proposeEventHandler_args, proposeEventHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<proposeEventHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("proposeEventHandler_args");

    private static final org.apache.thrift.protocol.TField PROPOSE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("proposeMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new proposeEventHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new proposeEventHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CabProposeMessage proposeMessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPOSE_MESSAGE((short)1, "proposeMessage");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPOSE_MESSAGE
            return PROPOSE_MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPOSE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("proposeMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CabProposeMessage.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(proposeEventHandler_args.class, metaDataMap);
    }

    public proposeEventHandler_args() {
    }

    public proposeEventHandler_args(
      CabProposeMessage proposeMessage)
    {
      this();
      this.proposeMessage = proposeMessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public proposeEventHandler_args(proposeEventHandler_args other) {
      if (other.isSetProposeMessage()) {
        this.proposeMessage = new CabProposeMessage(other.proposeMessage);
      }
    }

    public proposeEventHandler_args deepCopy() {
      return new proposeEventHandler_args(this);
    }

    @Override
    public void clear() {
      this.proposeMessage = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CabProposeMessage getProposeMessage() {
      return this.proposeMessage;
    }

    public proposeEventHandler_args setProposeMessage(@org.apache.thrift.annotation.Nullable CabProposeMessage proposeMessage) {
      this.proposeMessage = proposeMessage;
      return this;
    }

    public void unsetProposeMessage() {
      this.proposeMessage = null;
    }

    /** Returns true if field proposeMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetProposeMessage() {
      return this.proposeMessage != null;
    }

    public void setProposeMessageIsSet(boolean value) {
      if (!value) {
        this.proposeMessage = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case PROPOSE_MESSAGE:
        if (value == null) {
          unsetProposeMessage();
        } else {
          setProposeMessage((CabProposeMessage)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPOSE_MESSAGE:
        return getProposeMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPOSE_MESSAGE:
        return isSetProposeMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof proposeEventHandler_args)
        return this.equals((proposeEventHandler_args)that);
      return false;
    }

    public boolean equals(proposeEventHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_proposeMessage = true && this.isSetProposeMessage();
      boolean that_present_proposeMessage = true && that.isSetProposeMessage();
      if (this_present_proposeMessage || that_present_proposeMessage) {
        if (!(this_present_proposeMessage && that_present_proposeMessage))
          return false;
        if (!this.proposeMessage.equals(that.proposeMessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProposeMessage()) ? 131071 : 524287);
      if (isSetProposeMessage())
        hashCode = hashCode * 8191 + proposeMessage.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(proposeEventHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetProposeMessage(), other.isSetProposeMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProposeMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proposeMessage, other.proposeMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("proposeEventHandler_args(");
      boolean first = true;

      sb.append("proposeMessage:");
      if (this.proposeMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.proposeMessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (proposeMessage != null) {
        proposeMessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class proposeEventHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public proposeEventHandler_argsStandardScheme getScheme() {
        return new proposeEventHandler_argsStandardScheme();
      }
    }

    private static class proposeEventHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<proposeEventHandler_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, proposeEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROPOSE_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.proposeMessage = new CabProposeMessage();
                struct.proposeMessage.read(iprot);
                struct.setProposeMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, proposeEventHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.proposeMessage != null) {
          oprot.writeFieldBegin(PROPOSE_MESSAGE_FIELD_DESC);
          struct.proposeMessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class proposeEventHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public proposeEventHandler_argsTupleScheme getScheme() {
        return new proposeEventHandler_argsTupleScheme();
      }
    }

    private static class proposeEventHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<proposeEventHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, proposeEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProposeMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProposeMessage()) {
          struct.proposeMessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, proposeEventHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.proposeMessage = new CabProposeMessage();
          struct.proposeMessage.read(iprot);
          struct.setProposeMessageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
