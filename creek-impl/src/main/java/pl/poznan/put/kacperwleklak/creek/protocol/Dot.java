/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.poznan.put.kacperwleklak.creek.protocol;

import pl.poznan.put.kacperwleklak.cab.protocol.CabMessageID;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-28")
public class Dot implements org.apache.thrift.TBase<Dot, Dot._Fields>, java.io.Serializable, Cloneable, Comparable<Dot> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dot");

  private static final org.apache.thrift.protocol.TField REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("replica", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CURR_EVENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currEventNo", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DotStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DotTupleSchemeFactory();

  public byte replica; // required
  public long currEventNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICA((short)1, "replica"),
    CURR_EVENT_NO((short)2, "currEventNo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICA
          return REPLICA;
        case 2: // CURR_EVENT_NO
          return CURR_EVENT_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLICA_ISSET_ID = 0;
  private static final int __CURREVENTNO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICA, new org.apache.thrift.meta_data.FieldMetaData("replica", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CURR_EVENT_NO, new org.apache.thrift.meta_data.FieldMetaData("currEventNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dot.class, metaDataMap);
  }

  public Dot() {
  }

  public Dot(
    byte replica,
    long currEventNo)
  {
    this();
    this.replica = replica;
    setReplicaIsSet(true);
    this.currEventNo = currEventNo;
    setCurrEventNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dot(Dot other) {
    __isset_bitfield = other.__isset_bitfield;
    this.replica = other.replica;
    this.currEventNo = other.currEventNo;
  }

  @Override
  public Dot deepCopy() {
    return new Dot(this);
  }

  @Override
  public void clear() {
    setReplicaIsSet(false);
    this.replica = 0;
    setCurrEventNoIsSet(false);
    this.currEventNo = 0;
  }

  public byte getReplica() {
    return this.replica;
  }

  public Dot setReplica(byte replica) {
    this.replica = replica;
    setReplicaIsSet(true);
    return this;
  }

  public void unsetReplica() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLICA_ISSET_ID);
  }

  /** Returns true if field replica is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLICA_ISSET_ID);
  }

  public void setReplicaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLICA_ISSET_ID, value);
  }

  public long getCurrEventNo() {
    return this.currEventNo;
  }

  public Dot setCurrEventNo(long currEventNo) {
    this.currEventNo = currEventNo;
    setCurrEventNoIsSet(true);
    return this;
  }

  public void unsetCurrEventNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURREVENTNO_ISSET_ID);
  }

  /** Returns true if field currEventNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrEventNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURREVENTNO_ISSET_ID);
  }

  public void setCurrEventNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURREVENTNO_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REPLICA:
      if (value == null) {
        unsetReplica();
      } else {
        setReplica((java.lang.Byte)value);
      }
      break;

    case CURR_EVENT_NO:
      if (value == null) {
        unsetCurrEventNo();
      } else {
        setCurrEventNo((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICA:
      return getReplica();

    case CURR_EVENT_NO:
      return getCurrEventNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPLICA:
      return isSetReplica();
    case CURR_EVENT_NO:
      return isSetCurrEventNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Dot)
      return this.equals((Dot)that);
    return false;
  }

  public boolean equals(Dot that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_replica = true;
    boolean that_present_replica = true;
    if (this_present_replica || that_present_replica) {
      if (!(this_present_replica && that_present_replica))
        return false;
      if (this.replica != that.replica)
        return false;
    }

    boolean this_present_currEventNo = true;
    boolean that_present_currEventNo = true;
    if (this_present_currEventNo || that_present_currEventNo) {
      if (!(this_present_currEventNo && that_present_currEventNo))
        return false;
      if (this.currEventNo != that.currEventNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (replica);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(currEventNo);

    return hashCode;
  }

  @Override
  public int compareTo(Dot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetReplica(), other.isSetReplica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica, other.replica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrEventNo(), other.isSetCurrEventNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrEventNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currEventNo, other.currEventNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Dot(");
    boolean first = true;

    sb.append("replica:");
    sb.append(this.replica);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currEventNo:");
    sb.append(this.currEventNo);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DotStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public DotStandardScheme getScheme() {
      return new DotStandardScheme();
    }
  }

  private static class DotStandardScheme extends org.apache.thrift.scheme.StandardScheme<Dot> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Dot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.replica = iprot.readByte();
              struct.setReplicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURR_EVENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currEventNo = iprot.readI64();
              struct.setCurrEventNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Dot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REPLICA_FIELD_DESC);
      oprot.writeByte(struct.replica);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURR_EVENT_NO_FIELD_DESC);
      oprot.writeI64(struct.currEventNo);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DotTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public DotTupleScheme getScheme() {
      return new DotTupleScheme();
    }
  }

  private static class DotTupleScheme extends org.apache.thrift.scheme.TupleScheme<Dot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReplica()) {
        optionals.set(0);
      }
      if (struct.isSetCurrEventNo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReplica()) {
        oprot.writeByte(struct.replica);
      }
      if (struct.isSetCurrEventNo()) {
        oprot.writeI64(struct.currEventNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.replica = iprot.readByte();
        struct.setReplicaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currEventNo = iprot.readI64();
        struct.setCurrEventNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }

  public CabMessageID toCabMessageId() {
    return new CabMessageID(replica, currEventNo);
  }

  public static Dot fromCabMessageId(CabMessageID cabMessageID) {
    return new Dot(cabMessageID.replicaId, cabMessageID.operationId);
  }
}

