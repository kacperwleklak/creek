/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.poznan.put.kacperwleklak.creek.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-08-19")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STRONG_FIELD_DESC = new org.apache.thrift.protocol.TField("strong", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CASUAL_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("casualCtx", org.apache.thrift.protocol.TType.SET, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestTupleSchemeFactory();

  public byte msgType; // required
  public long timestamp; // required
  public @org.apache.thrift.annotation.Nullable EventID requestID; // required
  public @org.apache.thrift.annotation.Nullable Operation operation; // required
  public boolean strong; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<EventID> casualCtx; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_TYPE((short)1, "msgType"),
    TIMESTAMP((short)2, "timestamp"),
    REQUEST_ID((short)3, "requestID"),
    OPERATION((short)4, "operation"),
    STRONG((short)5, "strong"),
    CASUAL_CTX((short)6, "casualCtx");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_TYPE
          return MSG_TYPE;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // REQUEST_ID
          return REQUEST_ID;
        case 4: // OPERATION
          return OPERATION;
        case 5: // STRONG
          return STRONG;
        case 6: // CASUAL_CTX
          return CASUAL_CTX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __STRONG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CASUAL_CTX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "EventID")));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Operation")));
    tmpMap.put(_Fields.STRONG, new org.apache.thrift.meta_data.FieldMetaData("strong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CASUAL_CTX, new org.apache.thrift.meta_data.FieldMetaData("casualCtx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "EventID"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
    this.msgType = (byte)1;

  }

  public Request(
    long timestamp,
    EventID requestID,
    Operation operation,
    boolean strong)
  {
    this();
    setMsgTypeIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.requestID = requestID;
    this.operation = operation;
    this.strong = strong;
    setStrongIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgType = other.msgType;
    this.timestamp = other.timestamp;
    if (other.isSetRequestID()) {
      this.requestID = new EventID(other.requestID);
    }
    if (other.isSetOperation()) {
      this.operation = new Operation(other.operation);
    }
    this.strong = other.strong;
    if (other.isSetCasualCtx()) {
      java.util.Set<EventID> __this__casualCtx = new java.util.HashSet<EventID>(other.casualCtx.size());
      for (EventID other_element : other.casualCtx) {
        __this__casualCtx.add(new EventID(other_element));
      }
      this.casualCtx = __this__casualCtx;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.msgType = (byte)1;

    setTimestampIsSet(false);
    this.timestamp = 0;
    this.requestID = null;
    this.operation = null;
    setStrongIsSet(false);
    this.strong = false;
    this.casualCtx = null;
  }

  public byte getMsgType() {
    return this.msgType;
  }

  public Request setMsgType(byte msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Request setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public EventID getRequestID() {
    return this.requestID;
  }

  public Request setRequestID(@org.apache.thrift.annotation.Nullable EventID requestID) {
    this.requestID = requestID;
    return this;
  }

  public void unsetRequestID() {
    this.requestID = null;
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return this.requestID != null;
  }

  public void setRequestIDIsSet(boolean value) {
    if (!value) {
      this.requestID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Operation getOperation() {
    return this.operation;
  }

  public Request setOperation(@org.apache.thrift.annotation.Nullable Operation operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public boolean isStrong() {
    return this.strong;
  }

  public Request setStrong(boolean strong) {
    this.strong = strong;
    setStrongIsSet(true);
    return this;
  }

  public void unsetStrong() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRONG_ISSET_ID);
  }

  /** Returns true if field strong is set (has been assigned a value) and false otherwise */
  public boolean isSetStrong() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRONG_ISSET_ID);
  }

  public void setStrongIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRONG_ISSET_ID, value);
  }

  public int getCasualCtxSize() {
    return (this.casualCtx == null) ? 0 : this.casualCtx.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<EventID> getCasualCtxIterator() {
    return (this.casualCtx == null) ? null : this.casualCtx.iterator();
  }

  public void addToCasualCtx(EventID elem) {
    if (this.casualCtx == null) {
      this.casualCtx = new java.util.HashSet<EventID>();
    }
    this.casualCtx.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<EventID> getCasualCtx() {
    return this.casualCtx;
  }

  public Request setCasualCtx(@org.apache.thrift.annotation.Nullable java.util.Set<EventID> casualCtx) {
    this.casualCtx = casualCtx;
    return this;
  }

  public void unsetCasualCtx() {
    this.casualCtx = null;
  }

  /** Returns true if field casualCtx is set (has been assigned a value) and false otherwise */
  public boolean isSetCasualCtx() {
    return this.casualCtx != null;
  }

  public void setCasualCtxIsSet(boolean value) {
    if (!value) {
      this.casualCtx = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Byte)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((EventID)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((Operation)value);
      }
      break;

    case STRONG:
      if (value == null) {
        unsetStrong();
      } else {
        setStrong((Boolean)value);
      }
      break;

    case CASUAL_CTX:
      if (value == null) {
        unsetCasualCtx();
      } else {
        setCasualCtx((java.util.Set<EventID>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_TYPE:
      return getMsgType();

    case TIMESTAMP:
      return getTimestamp();

    case REQUEST_ID:
      return getRequestID();

    case OPERATION:
      return getOperation();

    case STRONG:
      return isStrong();

    case CASUAL_CTX:
      return getCasualCtx();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_TYPE:
      return isSetMsgType();
    case TIMESTAMP:
      return isSetTimestamp();
    case REQUEST_ID:
      return isSetRequestID();
    case OPERATION:
      return isSetOperation();
    case STRONG:
      return isSetStrong();
    case CASUAL_CTX:
      return isSetCasualCtx();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_msgType = true;
    boolean that_present_msgType = true;
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_requestID = true && this.isSetRequestID();
    boolean that_present_requestID = true && that.isSetRequestID();
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (!this.requestID.equals(that.requestID))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_strong = true;
    boolean that_present_strong = true;
    if (this_present_strong || that_present_strong) {
      if (!(this_present_strong && that_present_strong))
        return false;
      if (this.strong != that.strong)
        return false;
    }

    boolean this_present_casualCtx = true && this.isSetCasualCtx();
    boolean that_present_casualCtx = true && that.isSetCasualCtx();
    if (this_present_casualCtx || that_present_casualCtx) {
      if (!(this_present_casualCtx && that_present_casualCtx))
        return false;
      if (!this.casualCtx.equals(that.casualCtx))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (msgType);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetRequestID()) ? 131071 : 524287);
    if (isSetRequestID())
      hashCode = hashCode * 8191 + requestID.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperation()) ? 131071 : 524287);
    if (isSetOperation())
      hashCode = hashCode * 8191 + operation.hashCode();

    hashCode = hashCode * 8191 + ((strong) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCasualCtx()) ? 131071 : 524287);
    if (isSetCasualCtx())
      hashCode = hashCode * 8191 + casualCtx.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRequestID(), other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.compare(isSetMsgType(), other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOperation(), other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStrong(), other.isSetStrong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strong, other.strong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCasualCtx(), other.isSetCasualCtx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCasualCtx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.casualCtx, other.casualCtx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("msgType:");
    sb.append(this.msgType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    if (this.requestID == null) {
      sb.append("null");
    } else {
      sb.append(this.requestID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strong:");
    sb.append(this.strong);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.msgType = iprot.readByte();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestID = new EventID();
              struct.requestID.read(iprot);
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.operation = new Operation();
              struct.operation.read(iprot);
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRONG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strong = iprot.readBool();
              struct.setStrongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CASUAL_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.casualCtx = new java.util.HashSet<EventID>(2*_set0.size);
                @org.apache.thrift.annotation.Nullable EventID _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new EventID();
                  _elem1.read(iprot);
                  struct.casualCtx.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setCasualCtxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeByte(struct.msgType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.requestID != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        struct.requestID.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        struct.operation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STRONG_FIELD_DESC);
      oprot.writeBool(struct.strong);
      oprot.writeFieldEnd();
      if (struct.casualCtx != null) {
        if (struct.isSetCasualCtx()) {
          oprot.writeFieldBegin(CASUAL_CTX_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.casualCtx.size()));
            for (EventID _iter3 : struct.casualCtx)
            {
              _iter3.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMsgType()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetRequestID()) {
        optionals.set(2);
      }
      if (struct.isSetOperation()) {
        optionals.set(3);
      }
      if (struct.isSetStrong()) {
        optionals.set(4);
      }
      if (struct.isSetCasualCtx()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMsgType()) {
        oprot.writeByte(struct.msgType);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetRequestID()) {
        struct.requestID.write(oprot);
      }
      if (struct.isSetOperation()) {
        struct.operation.write(oprot);
      }
      if (struct.isSetStrong()) {
        oprot.writeBool(struct.strong);
      }
      if (struct.isSetCasualCtx()) {
        {
          oprot.writeI32(struct.casualCtx.size());
          for (EventID _iter4 : struct.casualCtx)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.msgType = iprot.readByte();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestID = new EventID();
        struct.requestID.read(iprot);
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operation = new Operation();
        struct.operation.read(iprot);
        struct.setOperationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.strong = iprot.readBool();
        struct.setStrongIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.casualCtx = new java.util.HashSet<EventID>(2*_set5.size);
          @org.apache.thrift.annotation.Nullable EventID _elem6;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = new EventID();
            _elem6.read(iprot);
            struct.casualCtx.add(_elem6);
          }
        }
        struct.setCasualCtxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

