/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.poznan.put.kacperwleklak.creek.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-28")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STRONG_FIELD_DESC = new org.apache.thrift.protocol.TField("strong", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CAUSAL_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("causalCtx", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestTupleSchemeFactory();

  public byte msgType; // required
  public long timestamp; // required
  public @org.apache.thrift.annotation.Nullable Dot requestID; // required
  public @org.apache.thrift.annotation.Nullable Operation operation; // required
  public boolean strong; // required
  public @org.apache.thrift.annotation.Nullable DottedVersionVector causalCtx; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_TYPE((short)1, "msgType"),
    TIMESTAMP((short)2, "timestamp"),
    REQUEST_ID((short)3, "requestID"),
    OPERATION((short)4, "operation"),
    STRONG((short)5, "strong"),
    CAUSAL_CTX((short)6, "causalCtx");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_TYPE
          return MSG_TYPE;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // REQUEST_ID
          return REQUEST_ID;
        case 4: // OPERATION
          return OPERATION;
        case 5: // STRONG
          return STRONG;
        case 6: // CAUSAL_CTX
          return CAUSAL_CTX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private static final int __TIMESTAMP_ISSET_ID = 1;
  private static final int __STRONG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAUSAL_CTX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dot.class)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Operation.class)));
    tmpMap.put(_Fields.STRONG, new org.apache.thrift.meta_data.FieldMetaData("strong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAUSAL_CTX, new org.apache.thrift.meta_data.FieldMetaData("causalCtx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DottedVersionVector.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
    this.msgType = (byte)1;

  }

  public Request(
    long timestamp,
    Dot requestID,
    Operation operation,
    boolean strong)
  {
    this();
    setMsgTypeIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.requestID = requestID;
    this.operation = operation;
    this.strong = strong;
    setStrongIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgType = other.msgType;
    this.timestamp = other.timestamp;
    if (other.isSetRequestID()) {
      this.requestID = new Dot(other.requestID);
    }
    if (other.isSetOperation()) {
      this.operation = new Operation(other.operation);
    }
    this.strong = other.strong;
    if (other.isSetCausalCtx()) {
      this.causalCtx = new DottedVersionVector(other.causalCtx);
    }
  }

  @Override
  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.msgType = (byte)1;

    setTimestampIsSet(false);
    this.timestamp = 0;
    this.requestID = null;
    this.operation = null;
    setStrongIsSet(false);
    this.strong = false;
    this.causalCtx = null;
  }

  public byte getMsgType() {
    return this.msgType;
  }

  public Request setMsgType(byte msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Request setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Dot getRequestID() {
    return this.requestID;
  }

  public Request setRequestID(@org.apache.thrift.annotation.Nullable Dot requestID) {
    this.requestID = requestID;
    return this;
  }

  public void unsetRequestID() {
    this.requestID = null;
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return this.requestID != null;
  }

  public void setRequestIDIsSet(boolean value) {
    if (!value) {
      this.requestID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Operation getOperation() {
    return this.operation;
  }

  public Request setOperation(@org.apache.thrift.annotation.Nullable Operation operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public boolean isStrong() {
    return this.strong;
  }

  public Request setStrong(boolean strong) {
    this.strong = strong;
    setStrongIsSet(true);
    return this;
  }

  public void unsetStrong() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRONG_ISSET_ID);
  }

  /** Returns true if field strong is set (has been assigned a value) and false otherwise */
  public boolean isSetStrong() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRONG_ISSET_ID);
  }

  public void setStrongIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRONG_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public DottedVersionVector getCausalCtx() {
    return this.causalCtx;
  }

  public Request setCausalCtx(@org.apache.thrift.annotation.Nullable DottedVersionVector causalCtx) {
    this.causalCtx = causalCtx;
    return this;
  }

  public void unsetCausalCtx() {
    this.causalCtx = null;
  }

  /** Returns true if field causalCtx is set (has been assigned a value) and false otherwise */
  public boolean isSetCausalCtx() {
    return this.causalCtx != null;
  }

  public void setCausalCtxIsSet(boolean value) {
    if (!value) {
      this.causalCtx = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((java.lang.Byte)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Dot)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((Operation)value);
      }
      break;

    case STRONG:
      if (value == null) {
        unsetStrong();
      } else {
        setStrong((java.lang.Boolean)value);
      }
      break;

    case CAUSAL_CTX:
      if (value == null) {
        unsetCausalCtx();
      } else {
        setCausalCtx((DottedVersionVector)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_TYPE:
      return getMsgType();

    case TIMESTAMP:
      return getTimestamp();

    case REQUEST_ID:
      return getRequestID();

    case OPERATION:
      return getOperation();

    case STRONG:
      return isStrong();

    case CAUSAL_CTX:
      return getCausalCtx();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MSG_TYPE:
      return isSetMsgType();
    case TIMESTAMP:
      return isSetTimestamp();
    case REQUEST_ID:
      return isSetRequestID();
    case OPERATION:
      return isSetOperation();
    case STRONG:
      return isSetStrong();
    case CAUSAL_CTX:
      return isSetCausalCtx();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_msgType = true;
    boolean that_present_msgType = true;
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_requestID = true && this.isSetRequestID();
    boolean that_present_requestID = true && that.isSetRequestID();
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (!this.requestID.equals(that.requestID))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_strong = true;
    boolean that_present_strong = true;
    if (this_present_strong || that_present_strong) {
      if (!(this_present_strong && that_present_strong))
        return false;
      if (this.strong != that.strong)
        return false;
    }

    boolean this_present_causalCtx = true && this.isSetCausalCtx();
    boolean that_present_causalCtx = true && that.isSetCausalCtx();
    if (this_present_causalCtx || that_present_causalCtx) {
      if (!(this_present_causalCtx && that_present_causalCtx))
        return false;
      if (!this.causalCtx.equals(that.causalCtx))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (msgType);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetRequestID()) ? 131071 : 524287);
    if (isSetRequestID())
      hashCode = hashCode * 8191 + requestID.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperation()) ? 131071 : 524287);
    if (isSetOperation())
      hashCode = hashCode * 8191 + operation.hashCode();

    hashCode = hashCode * 8191 + ((strong) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCausalCtx()) ? 131071 : 524287);
    if (isSetCausalCtx())
      hashCode = hashCode * 8191 + causalCtx.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRequestID(), other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.compare(isSetMsgType(), other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperation(), other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrong(), other.isSetStrong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strong, other.strong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCausalCtx(), other.isSetCausalCtx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCausalCtx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.causalCtx, other.causalCtx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Request(");
    boolean first = true;

    sb.append("msgType:");
    sb.append(this.msgType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    if (this.requestID == null) {
      sb.append("null");
    } else {
      sb.append(this.requestID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strong:");
    sb.append(this.strong);
    first = false;
    if (isSetCausalCtx()) {
      if (!first) sb.append(", ");
      sb.append("causalCtx:");
      if (this.causalCtx == null) {
        sb.append("null");
      } else {
        sb.append(this.causalCtx);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (requestID != null) {
      requestID.validate();
    }
    if (operation != null) {
      operation.validate();
    }
    if (causalCtx != null) {
      causalCtx.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.msgType = iprot.readByte();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestID = new Dot();
              struct.requestID.read(iprot);
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.operation = new Operation();
              struct.operation.read(iprot);
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRONG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strong = iprot.readBool();
              struct.setStrongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CAUSAL_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.causalCtx = new DottedVersionVector();
              struct.causalCtx.read(iprot);
              struct.setCausalCtxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeByte(struct.msgType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.requestID != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        struct.requestID.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        struct.operation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STRONG_FIELD_DESC);
      oprot.writeBool(struct.strong);
      oprot.writeFieldEnd();
      if (struct.causalCtx != null) {
        if (struct.isSetCausalCtx()) {
          oprot.writeFieldBegin(CAUSAL_CTX_FIELD_DESC);
          struct.causalCtx.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMsgType()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetRequestID()) {
        optionals.set(2);
      }
      if (struct.isSetOperation()) {
        optionals.set(3);
      }
      if (struct.isSetStrong()) {
        optionals.set(4);
      }
      if (struct.isSetCausalCtx()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMsgType()) {
        oprot.writeByte(struct.msgType);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetRequestID()) {
        struct.requestID.write(oprot);
      }
      if (struct.isSetOperation()) {
        struct.operation.write(oprot);
      }
      if (struct.isSetStrong()) {
        oprot.writeBool(struct.strong);
      }
      if (struct.isSetCausalCtx()) {
        struct.causalCtx.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.msgType = iprot.readByte();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestID = new Dot();
        struct.requestID.read(iprot);
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operation = new Operation();
        struct.operation.read(iprot);
        struct.setOperationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.strong = iprot.readBool();
        struct.setStrongIsSet(true);
      }
      if (incoming.get(5)) {
        struct.causalCtx = new DottedVersionVector();
        struct.causalCtx.read(iprot);
        struct.setCausalCtxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

