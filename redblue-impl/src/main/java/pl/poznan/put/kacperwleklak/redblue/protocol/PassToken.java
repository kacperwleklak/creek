/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.poznan.put.kacperwleklak.redblue.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-28")
public class PassToken implements org.apache.thrift.TBase<PassToken, PassToken._Fields>, java.io.Serializable, Cloneable, Comparable<PassToken> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PassToken");

  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField RED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("redNumber", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RECIPIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("recipient", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PassTokenStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PassTokenTupleSchemeFactory();

  public byte msgType; // required
  public long redNumber; // required
  public byte recipient; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_TYPE((short)1, "msgType"),
    RED_NUMBER((short)2, "redNumber"),
    RECIPIENT((short)3, "recipient");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_TYPE
          return MSG_TYPE;
        case 2: // RED_NUMBER
          return RED_NUMBER;
        case 3: // RECIPIENT
          return RECIPIENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private static final int __REDNUMBER_ISSET_ID = 1;
  private static final int __RECIPIENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("redNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECIPIENT, new org.apache.thrift.meta_data.FieldMetaData("recipient", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PassToken.class, metaDataMap);
  }

  public PassToken() {
    this.msgType = (byte)1;

  }

  public PassToken(
    long redNumber,
    byte recipient)
  {
    this();
    this.redNumber = redNumber;
    setRedNumberIsSet(true);
    this.recipient = recipient;
    setRecipientIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PassToken(PassToken other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgType = other.msgType;
    this.redNumber = other.redNumber;
    this.recipient = other.recipient;
  }

  @Override
  public PassToken deepCopy() {
    return new PassToken(this);
  }

  @Override
  public void clear() {
    this.msgType = (byte)1;

    setRedNumberIsSet(false);
    this.redNumber = 0;
    setRecipientIsSet(false);
    this.recipient = 0;
  }

  public byte getMsgType() {
    return this.msgType;
  }

  public PassToken setMsgType(byte msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  public long getRedNumber() {
    return this.redNumber;
  }

  public PassToken setRedNumber(long redNumber) {
    this.redNumber = redNumber;
    setRedNumberIsSet(true);
    return this;
  }

  public void unsetRedNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REDNUMBER_ISSET_ID);
  }

  /** Returns true if field redNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRedNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REDNUMBER_ISSET_ID);
  }

  public void setRedNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REDNUMBER_ISSET_ID, value);
  }

  public byte getRecipient() {
    return this.recipient;
  }

  public PassToken setRecipient(byte recipient) {
    this.recipient = recipient;
    setRecipientIsSet(true);
    return this;
  }

  public void unsetRecipient() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECIPIENT_ISSET_ID);
  }

  /** Returns true if field recipient is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipient() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECIPIENT_ISSET_ID);
  }

  public void setRecipientIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECIPIENT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Byte)value);
      }
      break;

    case RED_NUMBER:
      if (value == null) {
        unsetRedNumber();
      } else {
        setRedNumber((Long)value);
      }
      break;

    case RECIPIENT:
      if (value == null) {
        unsetRecipient();
      } else {
        setRecipient((Byte)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_TYPE:
      return getMsgType();

    case RED_NUMBER:
      return getRedNumber();

    case RECIPIENT:
      return getRecipient();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_TYPE:
      return isSetMsgType();
    case RED_NUMBER:
      return isSetRedNumber();
    case RECIPIENT:
      return isSetRecipient();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof PassToken)
      return this.equals((PassToken)that);
    return false;
  }

  public boolean equals(PassToken that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_msgType = true;
    boolean that_present_msgType = true;
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_redNumber = true;
    boolean that_present_redNumber = true;
    if (this_present_redNumber || that_present_redNumber) {
      if (!(this_present_redNumber && that_present_redNumber))
        return false;
      if (this.redNumber != that.redNumber)
        return false;
    }

    boolean this_present_recipient = true;
    boolean that_present_recipient = true;
    if (this_present_recipient || that_present_recipient) {
      if (!(this_present_recipient && that_present_recipient))
        return false;
      if (this.recipient != that.recipient)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (msgType);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(redNumber);

    hashCode = hashCode * 8191 + (int) (recipient);

    return hashCode;
  }

  @Override
  public int compareTo(PassToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetMsgType(), other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRedNumber(), other.isSetRedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redNumber, other.redNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRecipient(), other.isSetRecipient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipient, other.recipient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PassToken(");
    boolean first = true;

    sb.append("msgType:");
    sb.append(this.msgType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("redNumber:");
    sb.append(this.redNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recipient:");
    sb.append(this.recipient);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassTokenStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PassTokenStandardScheme getScheme() {
      return new PassTokenStandardScheme();
    }
  }

  private static class PassTokenStandardScheme extends org.apache.thrift.scheme.StandardScheme<PassToken> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, PassToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.msgType = iprot.readByte();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.redNumber = iprot.readI64();
              struct.setRedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECIPIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.recipient = iprot.readByte();
              struct.setRecipientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, PassToken struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeByte(struct.msgType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RED_NUMBER_FIELD_DESC);
      oprot.writeI64(struct.redNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECIPIENT_FIELD_DESC);
      oprot.writeByte(struct.recipient);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassTokenTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PassTokenTupleScheme getScheme() {
      return new PassTokenTupleScheme();
    }
  }

  private static class PassTokenTupleScheme extends org.apache.thrift.scheme.TupleScheme<PassToken> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PassToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMsgType()) {
        optionals.set(0);
      }
      if (struct.isSetRedNumber()) {
        optionals.set(1);
      }
      if (struct.isSetRecipient()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMsgType()) {
        oprot.writeByte(struct.msgType);
      }
      if (struct.isSetRedNumber()) {
        oprot.writeI64(struct.redNumber);
      }
      if (struct.isSetRecipient()) {
        oprot.writeByte(struct.recipient);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PassToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.msgType = iprot.readByte();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.redNumber = iprot.readI64();
        struct.setRedNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recipient = iprot.readByte();
        struct.setRecipientIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

