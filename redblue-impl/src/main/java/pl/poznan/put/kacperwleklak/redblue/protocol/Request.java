/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pl.poznan.put.kacperwleklak.redblue.protocol;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-26")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("redNumber", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SHADOW_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("shadowOp", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STRONG_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("strongOp", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CASUAL_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("casualCtx", org.apache.thrift.protocol.TType.SET, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestTupleSchemeFactory();

  public byte msgType; // required
  public @org.apache.thrift.annotation.Nullable EventID requestID; // required
  public long redNumber; // required
  public @org.apache.thrift.annotation.Nullable Operation shadowOp; // required
  public boolean strongOp; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<EventID> casualCtx; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_TYPE((short)1, "msgType"),
    REQUEST_ID((short)2, "requestID"),
    RED_NUMBER((short)3, "redNumber"),
    SHADOW_OP((short)4, "shadowOp"),
    STRONG_OP((short)5, "strongOp"),
    CASUAL_CTX((short)6, "casualCtx");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_TYPE
          return MSG_TYPE;
        case 2: // REQUEST_ID
          return REQUEST_ID;
        case 3: // RED_NUMBER
          return RED_NUMBER;
        case 4: // SHADOW_OP
          return SHADOW_OP;
        case 5: // STRONG_OP
          return STRONG_OP;
        case 6: // CASUAL_CTX
          return CASUAL_CTX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private static final int __REDNUMBER_ISSET_ID = 1;
  private static final int __STRONGOP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventID.class)));
    tmpMap.put(_Fields.RED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("redNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHADOW_OP, new org.apache.thrift.meta_data.FieldMetaData("shadowOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Operation.class)));
    tmpMap.put(_Fields.STRONG_OP, new org.apache.thrift.meta_data.FieldMetaData("strongOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CASUAL_CTX, new org.apache.thrift.meta_data.FieldMetaData("casualCtx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventID.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
    this.msgType = (byte)2;

  }

  public Request(
    EventID requestID,
    long redNumber,
    Operation shadowOp,
    boolean strongOp,
    java.util.Set<EventID> casualCtx)
  {
    this();
    this.requestID = requestID;
    this.redNumber = redNumber;
    setRedNumberIsSet(true);
    this.shadowOp = shadowOp;
    this.strongOp = strongOp;
    setStrongOpIsSet(true);
    this.casualCtx = casualCtx;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgType = other.msgType;
    if (other.isSetRequestID()) {
      this.requestID = new EventID(other.requestID);
    }
    this.redNumber = other.redNumber;
    if (other.isSetShadowOp()) {
      this.shadowOp = new Operation(other.shadowOp);
    }
    this.strongOp = other.strongOp;
    if (other.isSetCasualCtx()) {
      java.util.Set<EventID> __this__casualCtx = new java.util.HashSet<EventID>(other.casualCtx.size());
      for (EventID other_element : other.casualCtx) {
        __this__casualCtx.add(new EventID(other_element));
      }
      this.casualCtx = __this__casualCtx;
    }
  }

  @Override
  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.msgType = (byte)2;

    this.requestID = null;
    setRedNumberIsSet(false);
    this.redNumber = 0;
    this.shadowOp = null;
    setStrongOpIsSet(false);
    this.strongOp = false;
    this.casualCtx = null;
  }

  public byte getMsgType() {
    return this.msgType;
  }

  public Request setMsgType(byte msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public EventID getRequestID() {
    return this.requestID;
  }

  public Request setRequestID(@org.apache.thrift.annotation.Nullable EventID requestID) {
    this.requestID = requestID;
    return this;
  }

  public void unsetRequestID() {
    this.requestID = null;
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return this.requestID != null;
  }

  public void setRequestIDIsSet(boolean value) {
    if (!value) {
      this.requestID = null;
    }
  }

  public long getRedNumber() {
    return this.redNumber;
  }

  public Request setRedNumber(long redNumber) {
    this.redNumber = redNumber;
    setRedNumberIsSet(true);
    return this;
  }

  public void unsetRedNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REDNUMBER_ISSET_ID);
  }

  /** Returns true if field redNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRedNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REDNUMBER_ISSET_ID);
  }

  public void setRedNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REDNUMBER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Operation getShadowOp() {
    return this.shadowOp;
  }

  public Request setShadowOp(@org.apache.thrift.annotation.Nullable Operation shadowOp) {
    this.shadowOp = shadowOp;
    return this;
  }

  public void unsetShadowOp() {
    this.shadowOp = null;
  }

  /** Returns true if field shadowOp is set (has been assigned a value) and false otherwise */
  public boolean isSetShadowOp() {
    return this.shadowOp != null;
  }

  public void setShadowOpIsSet(boolean value) {
    if (!value) {
      this.shadowOp = null;
    }
  }

  public boolean isStrongOp() {
    return this.strongOp;
  }

  public Request setStrongOp(boolean strongOp) {
    this.strongOp = strongOp;
    setStrongOpIsSet(true);
    return this;
  }

  public void unsetStrongOp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRONGOP_ISSET_ID);
  }

  /** Returns true if field strongOp is set (has been assigned a value) and false otherwise */
  public boolean isSetStrongOp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRONGOP_ISSET_ID);
  }

  public void setStrongOpIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRONGOP_ISSET_ID, value);
  }

  public int getCasualCtxSize() {
    return (this.casualCtx == null) ? 0 : this.casualCtx.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<EventID> getCasualCtxIterator() {
    return (this.casualCtx == null) ? null : this.casualCtx.iterator();
  }

  public void addToCasualCtx(EventID elem) {
    if (this.casualCtx == null) {
      this.casualCtx = new java.util.HashSet<EventID>();
    }
    this.casualCtx.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<EventID> getCasualCtx() {
    return this.casualCtx;
  }

  public Request setCasualCtx(@org.apache.thrift.annotation.Nullable java.util.Set<EventID> casualCtx) {
    this.casualCtx = casualCtx;
    return this;
  }

  public void unsetCasualCtx() {
    this.casualCtx = null;
  }

  /** Returns true if field casualCtx is set (has been assigned a value) and false otherwise */
  public boolean isSetCasualCtx() {
    return this.casualCtx != null;
  }

  public void setCasualCtxIsSet(boolean value) {
    if (!value) {
      this.casualCtx = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Byte)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((EventID)value);
      }
      break;

    case RED_NUMBER:
      if (value == null) {
        unsetRedNumber();
      } else {
        setRedNumber((Long)value);
      }
      break;

    case SHADOW_OP:
      if (value == null) {
        unsetShadowOp();
      } else {
        setShadowOp((Operation)value);
      }
      break;

    case STRONG_OP:
      if (value == null) {
        unsetStrongOp();
      } else {
        setStrongOp((Boolean)value);
      }
      break;

    case CASUAL_CTX:
      if (value == null) {
        unsetCasualCtx();
      } else {
        setCasualCtx((java.util.Set<EventID>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_TYPE:
      return getMsgType();

    case REQUEST_ID:
      return getRequestID();

    case RED_NUMBER:
      return getRedNumber();

    case SHADOW_OP:
      return getShadowOp();

    case STRONG_OP:
      return isStrongOp();

    case CASUAL_CTX:
      return getCasualCtx();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_TYPE:
      return isSetMsgType();
    case REQUEST_ID:
      return isSetRequestID();
    case RED_NUMBER:
      return isSetRedNumber();
    case SHADOW_OP:
      return isSetShadowOp();
    case STRONG_OP:
      return isSetStrongOp();
    case CASUAL_CTX:
      return isSetCasualCtx();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_msgType = true;
    boolean that_present_msgType = true;
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_requestID = true && this.isSetRequestID();
    boolean that_present_requestID = true && that.isSetRequestID();
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (!this.requestID.equals(that.requestID))
        return false;
    }

    boolean this_present_redNumber = true;
    boolean that_present_redNumber = true;
    if (this_present_redNumber || that_present_redNumber) {
      if (!(this_present_redNumber && that_present_redNumber))
        return false;
      if (this.redNumber != that.redNumber)
        return false;
    }

    boolean this_present_shadowOp = true && this.isSetShadowOp();
    boolean that_present_shadowOp = true && that.isSetShadowOp();
    if (this_present_shadowOp || that_present_shadowOp) {
      if (!(this_present_shadowOp && that_present_shadowOp))
        return false;
      if (!this.shadowOp.equals(that.shadowOp))
        return false;
    }

    boolean this_present_strongOp = true;
    boolean that_present_strongOp = true;
    if (this_present_strongOp || that_present_strongOp) {
      if (!(this_present_strongOp && that_present_strongOp))
        return false;
      if (this.strongOp != that.strongOp)
        return false;
    }

    boolean this_present_casualCtx = true && this.isSetCasualCtx();
    boolean that_present_casualCtx = true && that.isSetCasualCtx();
    if (this_present_casualCtx || that_present_casualCtx) {
      if (!(this_present_casualCtx && that_present_casualCtx))
        return false;
      if (!this.casualCtx.equals(that.casualCtx))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (msgType);

    hashCode = hashCode * 8191 + ((isSetRequestID()) ? 131071 : 524287);
    if (isSetRequestID())
      hashCode = hashCode * 8191 + requestID.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(redNumber);

    hashCode = hashCode * 8191 + ((isSetShadowOp()) ? 131071 : 524287);
    if (isSetShadowOp())
      hashCode = hashCode * 8191 + shadowOp.hashCode();

    hashCode = hashCode * 8191 + ((strongOp) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCasualCtx()) ? 131071 : 524287);
    if (isSetCasualCtx())
      hashCode = hashCode * 8191 + casualCtx.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetMsgType(), other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRequestID(), other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRedNumber(), other.isSetRedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redNumber, other.redNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetShadowOp(), other.isSetShadowOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShadowOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shadowOp, other.shadowOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStrongOp(), other.isSetStrongOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrongOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strongOp, other.strongOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCasualCtx(), other.isSetCasualCtx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCasualCtx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.casualCtx, other.casualCtx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("msgType:");
    sb.append(this.msgType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestID:");
    if (this.requestID == null) {
      sb.append("null");
    } else {
      sb.append(this.requestID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redNumber:");
    sb.append(this.redNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shadowOp:");
    if (this.shadowOp == null) {
      sb.append("null");
    } else {
      sb.append(this.shadowOp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strongOp:");
    sb.append(this.strongOp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("casualCtx:");
    if (this.casualCtx == null) {
      sb.append("null");
    } else {
      sb.append(this.casualCtx);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (requestID != null) {
      requestID.validate();
    }
    if (shadowOp != null) {
      shadowOp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.msgType = iprot.readByte();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestID = new EventID();
              struct.requestID.read(iprot);
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.redNumber = iprot.readI64();
              struct.setRedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHADOW_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.shadowOp = new Operation();
              struct.shadowOp.read(iprot);
              struct.setShadowOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRONG_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strongOp = iprot.readBool();
              struct.setStrongOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CASUAL_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.casualCtx = new java.util.HashSet<EventID>(2*_set0.size);
                @org.apache.thrift.annotation.Nullable EventID _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new EventID();
                  _elem1.read(iprot);
                  struct.casualCtx.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setCasualCtxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeByte(struct.msgType);
      oprot.writeFieldEnd();
      if (struct.requestID != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        struct.requestID.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RED_NUMBER_FIELD_DESC);
      oprot.writeI64(struct.redNumber);
      oprot.writeFieldEnd();
      if (struct.shadowOp != null) {
        oprot.writeFieldBegin(SHADOW_OP_FIELD_DESC);
        struct.shadowOp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STRONG_OP_FIELD_DESC);
      oprot.writeBool(struct.strongOp);
      oprot.writeFieldEnd();
      if (struct.casualCtx != null) {
        oprot.writeFieldBegin(CASUAL_CTX_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.casualCtx.size()));
          for (EventID _iter3 : struct.casualCtx)
          {
            _iter3.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMsgType()) {
        optionals.set(0);
      }
      if (struct.isSetRequestID()) {
        optionals.set(1);
      }
      if (struct.isSetRedNumber()) {
        optionals.set(2);
      }
      if (struct.isSetShadowOp()) {
        optionals.set(3);
      }
      if (struct.isSetStrongOp()) {
        optionals.set(4);
      }
      if (struct.isSetCasualCtx()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMsgType()) {
        oprot.writeByte(struct.msgType);
      }
      if (struct.isSetRequestID()) {
        struct.requestID.write(oprot);
      }
      if (struct.isSetRedNumber()) {
        oprot.writeI64(struct.redNumber);
      }
      if (struct.isSetShadowOp()) {
        struct.shadowOp.write(oprot);
      }
      if (struct.isSetStrongOp()) {
        oprot.writeBool(struct.strongOp);
      }
      if (struct.isSetCasualCtx()) {
        {
          oprot.writeI32(struct.casualCtx.size());
          for (EventID _iter4 : struct.casualCtx)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.msgType = iprot.readByte();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestID = new EventID();
        struct.requestID.read(iprot);
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.redNumber = iprot.readI64();
        struct.setRedNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shadowOp = new Operation();
        struct.shadowOp.read(iprot);
        struct.setShadowOpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.strongOp = iprot.readBool();
        struct.setStrongOpIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.casualCtx = new java.util.HashSet<EventID>(2*_set5.size);
          @org.apache.thrift.annotation.Nullable EventID _elem6;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = new EventID();
            _elem6.read(iprot);
            struct.casualCtx.add(_elem6);
          }
        }
        struct.setCasualCtxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

